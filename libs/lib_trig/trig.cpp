#include "trig.hpp"

#include <math.h>
#include <stdint.h>

namespace lib_trig {

// Fast integer trig functions from the excellent Gameduino2 Library
// https://github.com/jamesbowman/gd2-lib/blob/master/GD2.cpp#L744

namespace {

// >>> [int(65535*math.sin(math.pi * 2 * i / 1024)) for i in range(257)]
static const uint16_t sintab[257] = {
    0,     402,   804,   1206,  1608,  2010,  2412,  2813,  3215,  3617,  4018,
    4419,  4821,  5221,  5622,  6023,  6423,  6823,  7223,  7622,  8022,  8421,
    8819,  9218,  9615,  10013, 10410, 10807, 11203, 11599, 11995, 12390, 12785,
    13179, 13573, 13966, 14358, 14750, 15142, 15533, 15923, 16313, 16702, 17091,
    17479, 17866, 18252, 18638, 19023, 19408, 19791, 20174, 20557, 20938, 21319,
    21699, 22078, 22456, 22833, 23210, 23585, 23960, 24334, 24707, 25079, 25450,
    25820, 26189, 26557, 26924, 27290, 27655, 28019, 28382, 28744, 29105, 29465,
    29823, 30181, 30537, 30892, 31247, 31599, 31951, 32302, 32651, 32999, 33346,
    33691, 34035, 34378, 34720, 35061, 35400, 35737, 36074, 36409, 36742, 37075,
    37406, 37735, 38063, 38390, 38715, 39039, 39361, 39682, 40001, 40319, 40635,
    40950, 41263, 41574, 41885, 42193, 42500, 42805, 43109, 43411, 43711, 44010,
    44307, 44603, 44896, 45189, 45479, 45768, 46055, 46340, 46623, 46905, 47185,
    47463, 47739, 48014, 48287, 48558, 48827, 49094, 49360, 49623, 49885, 50145,
    50403, 50659, 50913, 51165, 51415, 51664, 51910, 52155, 52397, 52638, 52876,
    53113, 53347, 53580, 53810, 54039, 54265, 54490, 54712, 54933, 55151, 55367,
    55581, 55793, 56003, 56211, 56416, 56620, 56821, 57021, 57218, 57413, 57606,
    57796, 57985, 58171, 58355, 58537, 58717, 58894, 59069, 59242, 59413, 59582,
    59748, 59912, 60074, 60234, 60391, 60546, 60699, 60849, 60997, 61143, 61287,
    61428, 61567, 61704, 61838, 61970, 62100, 62227, 62352, 62474, 62595, 62713,
    62828, 62941, 63052, 63161, 63267, 63370, 63472, 63570, 63667, 63761, 63853,
    63942, 64029, 64114, 64196, 64275, 64353, 64427, 64500, 64570, 64637, 64702,
    64765, 64825, 64883, 64938, 64991, 65042, 65090, 65135, 65178, 65219, 65257,
    65293, 65326, 65357, 65385, 65411, 65435, 65456, 65474, 65490, 65504, 65515,
    65523, 65530, 65533, 65535};

// >>> [int(round(1024 * math.atan(i / 256.) / math.pi)) for i in range(256)]
static const uint8_t atan8[] = {
    0,   1,   3,   4,   5,   6,   8,   9,   10,  11,  13,  14,  15,  17,  18,
    19,  20,  22,  23,  24,  25,  27,  28,  29,  30,  32,  33,  34,  36,  37,
    38,  39,  41,  42,  43,  44,  46,  47,  48,  49,  51,  52,  53,  54,  55,
    57,  58,  59,  60,  62,  63,  64,  65,  67,  68,  69,  70,  71,  73,  74,
    75,  76,  77,  79,  80,  81,  82,  83,  85,  86,  87,  88,  89,  91,  92,
    93,  94,  95,  96,  98,  99,  100, 101, 102, 103, 104, 106, 107, 108, 109,
    110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126,
    127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142,
    143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,
    158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
    173, 174, 175, 176, 177, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
    187, 188, 188, 189, 190, 191, 192, 193, 194, 195, 195, 196, 197, 198, 199,
    200, 201, 201, 202, 203, 204, 205, 206, 206, 207, 208, 209, 210, 211, 211,
    212, 213, 214, 215, 215, 216, 217, 218, 219, 219, 220, 221, 222, 222, 223,
    224, 225, 225, 226, 227, 228, 228, 229, 230, 231, 231, 232, 233, 234, 234,
    235, 236, 236, 237, 238, 239, 239, 240, 241, 241, 242, 243, 243, 244, 245,
    245, 246, 247, 248, 248, 249, 250, 250, 251, 251, 252, 253, 253, 254, 255,
    255};

} // namespace

float rsin(float theta) {
  int16_t itheta = ((65536L * (theta)) / (2 * M_PI));
  int16_t result = rsin((int16_t)15'000, itheta);
  return (float)result / (float)15'000;
}

float rcos(float theta) {
  int16_t itheta = ((65536L * (theta)) / (2 * M_PI));
  int16_t result = rcos((int16_t)15'000, itheta);
  return (float)result / (float)15'000;
}

int16_t rsin(int16_t r, uint16_t th) {
  th >>= 6; // angle 0-1023
  // return int(r * sin((2 * M_PI) * th / 1024.));
  int th4 = th & 511;
  if (th4 & 256)
    th4 = 512 - th4; // 256->256 257->255, etc
  uint16_t s = sintab[th4];
  int16_t p = ((uint32_t)s * r) >> 16;
  if (th & 512)
    p = -p;
  return p;
}

int16_t rcos(int16_t r, uint16_t th) { return rsin(r, th + 0x4000); }

void polar(int &x, int &y, int16_t r, uint16_t th) {
  x = (int)(-rsin(r, th));
  y = (int)(rcos(r, th));
}

uint16_t atan2(int16_t y, int16_t x) {
  uint16_t a;
  uint16_t xx = 0;

  /* These values are tricky. So pretend they are not */
  if (x == -32768)
    x++;
  if (y == -32768)
    y++;

  if ((x <= 0) ^ (y > 0)) {
    int16_t t;
    t = x;
    x = y;
    y = t;
    xx ^= 0x4000;
  }
  if (x <= 0) {
    x = -x;
  } else {
    xx ^= 0x8000;
  }
  y = abs(y);
  if (x > y) {
    int16_t t;
    t = x;
    x = y;
    y = t;
    xx ^= 0x3fff;
  }
  while ((x | y) & 0xff80) {
    x >>= 1;
    y >>= 1;
  }
  if (y == 0) {
    a = 0;
  } else if (x == y) {
    a = 0x2000;
  } else {
    // assert(x <= y);
    int r = ((x << 8) / y);
    // assert(0 <= r);
    // assert(r < 256);
    a = atan8[r] << 5;
  }
  a ^= xx;
  return a;
}

} // namespace lib_trig
